#!/bin/bash

function help() {
    echo
    echo "$1 <command> [options]"
    echo
    echo "commands:"
    echo
    column -t -s"|" ./task.md | tail -n +3
    echo
}

# Set default env vars
export GIT_BRANCH=$(git branch --show-current)
export FRAPPE_VERSION=v13
export LETSENCRYPT_EMAIL=email@example.com
export POSTGRES_HOST=postgresql
export POSTGRES_PASSWORD=frappe
export SITE_NAME=mysite.localhost
export SITES=mysite.localhost
export POSTGRES_USER=postgres
export ADMIN_PASSWORD=frappe
export INSTALL_APPS=uppsala
export SOCKETIO_PORT=8443

if [ -a ".env" ]; then
    export $(cat .env | sed 's/#.*//g' | xargs)
fi

function activate-venv() {
    echo "Source virtualenv venv$GIT_BRANCH."
    source "venv$GIT_BRANCH/bin/activate"
}

function init-venv() {
    if [ ! -d "venv$GIT_BRANCH" ]; then
        python3 -m venv "venv$GIT_BRANCH"
        source "venv$GIT_BRANCH/bin/activate"
    fi
}

function install() {

    echo "Run native installation"

    # Init Python and install bench
    init-venv
    activate-venv
    pip install frappe-bench

    echo "Install frappe with bench."
    [ ! -d 'frappe-bench' ] && bench init --skip-redis-config-generation --frappe-branch version-13 frappe-bench

    echo "Configure frappe bench."
    cd frappe-bench
    bench set-mariadb-host localhost
    bench set-redis-cache-host localhost:6379
    bench set-redis-queue-host localhost:6380
    bench set-redis-socketio-host localhost:6381
    bench set-config -g socketio_port $SOCKETIO_PORT
    
    # Install site
    echo "Use $POSTGRES_USER and $POSTGRES_PASSWORD for username and password on prompts:"
    [ ! -d "frappe-bench/sites/$SITE_NAME" ] && bench new-site $SITE_NAME --db-type postgres --db-host localhost --db-password frappe --admin-password $ADMIN_PASSWORD

    # Enable developer mode
    echo "Apply default settings."
    bench --site $SITE_NAME set-config developer_mode 1
    bench --site $SITE_NAME set-config max_file_size 1000000
}

function install-docker-dev() {
    CONTAINER=frappe-bench

    echo "Run docker installation."
    [ ! -d 'frappe-bench' ] && docker exec -w /workspace $CONTAINER bench init --skip-redis-config-generation --frappe-branch version-13 frappe-bench
    
    echo "Configure frappe bench."
    docker exec -w /workspace/frappe-bench $CONTAINER bench set-mariadb-host postgresql
    docker exec -w /workspace/frappe-bench $CONTAINER bench set-config -g redis_cache redis://redis-cache:6379
    docker exec -w /workspace/frappe-bench $CONTAINER bench set-config -g redis_queue redis://redis-queue:6379
    docker exec -w /workspace/frappe-bench $CONTAINER bench set-config -g redis_socketio redis://redis-socketio:6379
    docker exec -w /workspace/frappe-bench $CONTAINER bench set-config -g socketio_port $SOCKETIO_PORT

    # Install site
    echo "Use $POSTGRES_USER and $POSTGRES_PASSWORD for username and password on prompts:"
    [ ! -d "frappe-bench/sites/$SITE_NAME" ] && docker exec -w /workspace/frappe-bench -it $CONTAINER bench new-site $SITE_NAME --db-type postgres --db-host postgresql --db-password $POSTGRES_PASSWORD --admin-password $ADMIN_PASSWORD

    # Enable developer mode
    echo "Apply default settings."
    docker exec -w /workspace/frappe-bench $CONTAINER bench --site $SITE_NAME set-config developer_mode 1
    docker exec -w /workspace/frappe-bench $CONTAINER bench --site $SITE_NAME set-config max_file_size 1000000

    docker restart $CONTAINER
}


function upgrade() {
    echo "Upgrade frappe bench."
    activate-venv
    pip install --upgrade frappe-bench 
}

function bench-native() {
    init-venv
    activate-venv
    cd frappe-bench
    bench "$@"
}

function bench-docker() {
    docker exec frappe-python bench "$@"
}

function bench-docker-dev() {
    docker exec  -w /workspace/frappe-bench frappe-bench bench "$@"
}

function version() {
    printf "\ndocker:\n"
    docker version
    printf "\ndocker-compose:\n"
    docker-compose version
    printf "\nwkhtmltopdf:\n"
    wkhtmltopdf --version
    printf "\npython:\n"
    python --version
    printf "\npip:\n"
    pip --version
    printf "\nnode:\n"
    node --version
    printf "\nnpm:\n"
    npm --version
    printf "\nyarn:\n"
    yarn --version
}

function new-app() {
    if test -z "$1"; then echo "\$1 is empty"; exit; fi

    activate-venv
    cd frappe-bench
    bench new-app $1
    bench --site $SITE_NAME install-app $1
}

function install-app() {
    if test -z "$1"; then echo "\$1 is empty"; exit; fi
    if test -z "$2"; then echo "\$1 is empty"; exit; fi
    
    activate-venv
    cd frappe-bench
    bench get-app $1 $2
    bench --site $SITE_NAME install-app $1
}

function docker-install-app() {
    if test -z "$1"; then echo "\$1 is empty"; exit; fi
    if test -z "$2"; then echo "\$1 is empty"; exit; fi
    
    docker exec frappe-python install_app $1 $2
    docker exec frappe-python bash -c "echo -e \"\\n$1\" >> apps.txt"
    docker-bench install-app $1
    restart
}

function uninstall-app() {
    if test -z "$1"; then echo "\$1 is empty"; exit; fi
    
    activate-venv
    cd frappe-bench
    bench --site $SITE_NAME uninstall-app $1
}

function clear-cache() {
    activate-venv
    cd frappe-bench
    bench --site all clear-cache
}

function start() {
    if [[ "$1" =~ "native" ]]; then
        activate-venv
        cd frappe-bench
        echo "Open http://localhost:8000/ in your browser and login using 'Administrator:$ADMIN_PASSWORD'."
        bench start
    fi

    if [[ "$1" =~ "db" ]]; then
        docker-compose up -d redis-cache
        docker-compose up -d redis-queue
        docker-compose up -d redis-socketio
        docker-compose up -d postgresql
    fi

    if [[ "$1" =~ "site" ]]; then
        docker-compose up -d site-creator
    fi

    if [[ "$1" =~ "worker" ]]; then
        docker-compose up -d frappe-worker-long
        docker-compose up -d frappe-worker-short
        docker-compose up -d frappe-worker-default
    fi

    if [[ "$1" =~ "nginx" ]]; then
        docker-compose up -d frappe-nginx
    fi

    if [[ "$1" =~ "dev" ]]; then
        docker-compose -f docker-compose-dev.yml up -d
        echo "Run 'task start bench' manually and open http://$SITE_NAME:8000/ in your browser."
        docker exec -w /workspace/frappe-bench frappe-bench bench start
    fi

    if [[ "$1" =~ "bench" ]]; then
        docker exec -w /workspace/frappe-bench frappe-bench bench start
    fi

    if [[ "$1" =~ "all" ]]; then
        docker-compose up -d
        echo "Open http://$SITE_NAME:8080/ in your browser and login using 'Administrator:$ADMIN_PASSWORD'."
    fi
}

function stop() {
    if test -z "$1"; then
        docker-compose stop
    fi
}

function restart() {
    if test -z "$1"; then
        docker-compose restart
    fi
}

case "$1" in
    version)
        version
        ;;
    install)
        install $2
        ;;
    docker-install)
        docker-install $2
        ;;
    install-docker-dev)
        install-docker-dev
        ;;
    bench-native)
        bench-native "${@:2}"
        ;;
    bench-docker)
        bench-docker "${@:2}"
        ;;
    bench-docker-dev)
        bench-docker-dev "${@:2}"
        ;;
    init)
        init $2
        ;;
    start)
        start $2
        ;;
    stop)
        stop
        ;;
    stop-bench)
        docker exec -w /workspace/frappe-bench frappe-bench killall -s 9 python
        ;;
    logs)
        docker logs frappe-python -f
        ;;
    upgrade)
        upgrade
        ;;
    new-app)
        new-app $2
        ;;
    install-app)
        install-app $2 $3
        ;;
    uninstall-app)
        uninstall-app $2
        ;;
    docker-install-app)
        docker-install-app $2 $3
        ;;
    restart)
        restart
        ;;
    kill)
        docker-compose down -v
        ;;
    kill-dev)
        docker-compose -f docker-compose-dev.yml down -v
        ;;
    clear-cache)
        clear-cache
        ;;
    source)
        activate-venv
        ;;
    *)
        help task
        exit 1
        ;;
esac
